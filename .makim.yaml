version: 1.0.0
env-file: .env
groups:

  # DJANGO
  django:
    env-file: .env
    vars:
      sugar_run_rm: kxgr run --service web --options --rm
      manage_py: python manage.py
    targets:
      # DEV MODE
      run:
        help: Wait for a service
        args:
          subcommand:
            help: Run a specific django subcommand
            type: string
            default: runserver
        run: |
          cd AlertaDengue &
          {{ vars.manage_py }} {{ args.subcommand }}
      # CONTAINER
      static-geofiles:
        help: Generate static geofiles
        run: |
          {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd {{ vars.manage_py }} sync_geofiles
          {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd {{ vars.manage_py }} collectstatic --noinput
      migrate:
        run: |
          for cmd in [
            "--database=dados",
            "--database=infodengue",
            # "--database=forecast"
          ]:
            {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd {{ vars.manage_py }} migrate  --noinput @(cmd)
      send-mail-partner:
        run: |
          {{ vars.sugar_run_rm }} --cmd {{ vars.manage_py }} send_mail
      # TESTS
      test-staging-web:
        run: |
          for test_name in ['dados', 'dbf', 'gis', 'api']:
            {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd . /opt/services/test.sh @(test_name)
      test-staging-all:
        run: |
          {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd {{ vars.manage_py }} test --noinput

  develop:
    env-file: .env
    help: "group"
    targets:
      # CI
      container-wait:
        help: Wait for a service
        args:
          timeout:
            help: Define the timeout for the healthcheck
            type: integer
            default: 30
          service:
            help: Service name that would be awaited
            type: string
            required: True
        run: |
          timeout {{ args.timeout }} ./containers/scripts/healthcheck.sh {{ args.service }}
      container-wait-all:
        run: |
          # if $ENV == "dev":
          #   makim develop.container-wait --service "postgres"

          for service in ["postgres","memcached","rabbitmq","web"]:
            makim develop.container-wait --service @(service)

      clean:
        help: Clean all artifacts
        shell: python
        args:
          path:
            help: Define the files to remove
            type: string
            default: ""
        run: |
          import shutil
          from pathlib import Path

          base_dir = Path(".")

          list_to_cache_files = [
            'build/', 'dist/', '.eggs/', '*/.eggs', 'db',
            '*.egg-info', '*.egg', '*.pyc', '*.pyo', '*~', 
            '__pycache__', '*.ipynb_checkpoints', '*.pytest_cache'
          ]

          for item in list_to_cache_files:
              files = base_dir.glob(f'**/{item}')
              for file in files:
                  if file.is_dir():
                      shutil.rmtree(file)
                  else:
                      file.unlink()

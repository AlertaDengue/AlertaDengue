version: 1.0.0
env-file: .env
groups:

  # DJANGO
  django:
    env-file: .env
    help: Run Django commands and manage the development server.
    vars:
      sugar_run_rm: sugar run --service web --options --rm
      manage_py: python manage.py
    targets:
      # DEV MODE
      run:
        help: Start the development server locally.
        args:
          subcommand:
            help: Specify a Django subcommand to run.
            type: string
            default: runserver
        run: |
          cd AlertaDengue &&
          {{ vars.manage_py }} {{ args.subcommand }}

      # CONTAINER
      static-collectstatic:
        help: Collect static files into a single location.
        run: |
          {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd {{ vars.manage_py }} collectstatic --noinput

      static-geofiles:
        help: Generate geojson files and save them in the staticfiles folder.
        run: |
          {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd {{ vars.manage_py }} sync_geofiles

      migrate:
        help: Apply database migrations for specified databases.
        run: |
          for cmd in [
            "--database=dados",
            "--database=infodengue",
            # "--database=forecast"
          ]:
            {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd {{ vars.manage_py }} migrate --noinput @(cmd)

      send-mail-partner:
        help: Send email to partners.
        run: |
          {{ vars.sugar_run_rm }} --cmd {{ vars.manage_py }} send_mail

      # TESTS
      test-staging-web:
        help: Run specific tests for web staging.
        run: |
          for test_name in ['dados', 'dbf', 'gis', 'api']:
            {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd . /opt/services/test.sh @(test_name)

      test-staging-all:
        help: Run all tests for web staging.
        run: |
          {{ vars.sugar_run_rm }} --entrypoint "/entrypoint.sh" --cmd {{ vars.manage_py }} test --noinput

  develop:
    env-file: .env
    help: Development tasks and utilities.
    vars:
      manage_py: python AlertaDengue/manage.py
    targets:
      # CI
      container-wait:
        help: Wait for a specific service to become available.
        args:
          timeout:
            help: Define the timeout in seconds for the health check.
            type: integer
            default: 30
          service:
            help: Specify the name of the service to wait for.
            type: string
            required: true
        run: |
          timeout {{ args.timeout }} ./containers/scripts/healthcheck.sh {{ args.service }}

      container-wait-all:
        run: |
          for service in ["stagingdb", "memcached", "rabbitmq", "web", "worker"]:
            makim develop.container-wait --service @(service)

      clean:
        help: Clean all generated artifacts from the project.
        shell: python
        dependencies:
          - target: develop.clear_cache
        args:
          path:
            help: Specify the path of the files to remove.
            type: string
            default: ""
        run: |
          import shutil
          from pathlib import Path

          base_dir = Path(".")

          list_to_cache_files = [
            'build/', 'dist/', '.eggs/', '*/.eggs', 'db',
            '*.egg-info', '*.egg', '*.pyc', '*.pyo', '*~',
            '__pycache__', '*.ipynb_checkpoints', '*.pytest_cache'
          ]

          for item in list_to_cache_files:
              files = base_dir.glob(f'**/{item}')
              for file in files:
                  if file.is_dir():
                      shutil.rmtree(file)
                  else:
                      file.unlink()

      clear_cache:
        help: Clear all Django cache
        args:
          subcommand:
            help: Specify a Django subcommand to run.
            type: string
            default: clearcache
        run: |
          {{ vars.manage_py }} {{ args.subcommand }}

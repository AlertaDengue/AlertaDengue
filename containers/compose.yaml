version: "3.4"
services:

  memcached:
    container_name: infodengue-${ENV}-memcached
    hostname: infodengue-${ENV}-memcached
    image: memcached:alpine
    entrypoint:
      - memcached
      - -m 64
    ports:
      - ${MEMCACHED_PORT}:11211
    expose:
      - ${MEMCACHED_PORT}

    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "11211"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: always
    networks:
      - infodengue

  rabbitmq:
    container_name: infodengue-${ENV}-rabbitmq
    hostname: infodengue-${ENV}-rabbitmq
    image: rabbitmq:3-alpine
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5672"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: always
    networks:
      - infodengue

  redis:
    container_name: infodengue-${ENV}-redis
    hostname: infodengue-${ENV}-redis
    platform: linux/amd64
    image: redis:alpine
    restart: unless-stopped
    # environment:
      # DISABLE_COMMANDS: "FLUSHDB,FLUSHALL,CONFIG"
      # ALLOW_EMPTY_PASSWORD: "no"
      # REDIS_PASSWORD: "${REDIS_PASSWORD}"
    ports:
      - ${REDIS_PORT}:6379
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - redis:/data
    networks:
      - infodengue


  base_postgres:
    build:
      context: ".."
      dockerfile: "containers/postgres/Dockerfile"
      args:
        HOST_UID: ${HOST_UID}
        HOST_GID: ${HOST_GID}
    env_file:
      - ../.env
    profiles:
      - donotstart

  postgres:
    container_name: infodengue-${ENV}-postgres
    hostname: infodengue-${ENV}-postgres
    extends:
      service: base_postgres
    env_file:
      - ../.env
    environment:
      PG_RESTORE_STAGING: ${PG_RESTORE_STAGING}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "md5"
    ports:
      - ${PSQL_PORT}:5432
    user: ${HOST_UID}:${HOST_GID}
    volumes:
      - ${PG_DATA_PROD}:/var/lib/postgresql/data
      - ../containers/postgres/setup/:/docker-entrypoint-initdb.d/compose
      - ../containers/postgres/dumps/:/dumps/
    command: -p ${PSQL_PORT}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PSQL_PORT} -U ${PSQL_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - infodengue

  stagingdb:
    container_name: infodengue-${ENV}-stagingdb
    hostname: infodengue-${ENV}-stagingdb
    extends:
      service: base_postgres
    env_file:
      - ../.env
    environment:
      PG_RESTORE_STAGING: ${PG_RESTORE_STAGING}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "md5"
    user: ${HOST_UID}:${HOST_GID}
    volumes:
      - ${PG_DATA_STAGING}:/var/lib/postgresql/data
      - ../containers/postgres/setup/:/docker-entrypoint-initdb.d/
      - ../containers/postgres/${PG_RESTORE_STAGING}/:/${PG_RESTORE_STAGING}/
    command: -p ${PSQL_PORT}
    restart: always
    ports:
      - ${PSQL_PORT}:25432
    networks:
      - infodengue
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PSQL_PORT} -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 1

  base:
    container_name: infodengue-${ENV}-base
    build:
      context: ".."
      dockerfile: "containers/web/Dockerfile"
      args:
        HOST_UID: ${HOST_UID}
        HOST_GID: ${HOST_GID}
        ENV: ${ENV}
    env_file:
      - ../.env
    environment:
      - MEMCACHED_HOST=memcached
      - CELERY_BROKER_URL=amqp://guest:guest@infodengue-${ENV}-rabbitmq:5672
      - PSQL_HOST=${PSQL_HOST}
      - PSQL_PORT=${PSQL_PORT}
    volumes:
      - ${DOCKER_HOST_UPLOADED_FILES_DIR}:/MEDIA_ROOT
      - ${DOCKER_HOST_IMPORTED_FILES_DIR}:/IMPORTED_FILES
      - ${DOCKER_HOST_DBF_SINAN}:/DBF_SINAN
      - ${DOCKER_HOST_SHAPEFILES_DIR}:/srv/deploy/shapefile
      - ${DOCKER_HOST_TEMP_PARQUET_DIR}:/tmp/dbf_parquet
    user: ${HOST_UID}:${HOST_GID}
    profiles:
      - donotstart

  web:
    container_name: infodengue-${ENV}-web
    hostname: infodengue-${ENV}-web
    extends:
      service: base
    env_file:
      - ../.env
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    depends_on:
      - rabbitmq
      - memcached
      - worker
    restart: always
    entrypoint: ["bash", "/entrypoint.sh"]
    user: ${HOST_UID}:${HOST_GID}
    command:
      - sh
      - -c
      - |
        if [ "${ENV}" = "prod" ]; then
          python3 /opt/services/AlertaDengue/manage.py collectstatic --noinput
          gunicorn -w 4 -b 0.0.0.0:${WEB_PORT} ad_main.wsgi:application --timeout 9640;
        else
          python3 /opt/services/AlertaDengue/manage.py collectstatic --noinput
          python manage.py runserver 0.0.0.0:${WEB_PORT};
        fi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WEB_PORT}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - infodengue

  worker:
    container_name: infodengue-${ENV}-worker
    hostname: infodengue-${ENV}-worker
    extends:
      service: base
    entrypoint: ["bash", "/entrypoint.sh", "/opt/services/celery.sh"]
    # command: ["python3", "/opt/services/AlertaDengue/dbf/collector.py"]
    env_file:
      - ../.env
    volumes:
      - ${EPISCANNER_HOST_DIR}:/opt/services/episcanner
    #   - ${HOST_MINIO_DATA_DIR}:/opt/services/collector
    user: ${HOST_UID}:${HOST_GID}
    depends_on:
      - rabbitmq
      - memcached
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", 'celery --app ad_main.celeryapp.app status']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - infodengue

volumes:
  dumps:
  redis:


networks:
  infodengue:
    driver: bridge

version: "3.4"
services:
  base_postgres:
    build:
      context: ".."
      dockerfile: "containers/postgres/Dockerfile"
    env_file:
      - ../.env
    profiles:
      - donotstart

  postgres:
    hostname: postgres
    extends:
      service: base_postgres
    env_file:
      - ../.env
    environment:
      PG_RESTORE_STAGING: ${PG_RESTORE_STAGING}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "md5"
    ports:
      - ${PSQL_PORT}:5432
    volumes:
      - ../../pg_staging_data:/var/lib/postgresql/data/
      - ../containers/postgres/setup/:/docker-entrypoint-initdb.d/
      - ../containers/postgres/${PG_RESTORE_STAGING}/:/${PG_RESTORE_STAGING}/
    command: -p ${PSQL_PORT} # postgres -c max_wal_size=3GB
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PSQL_PORT} -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10

  dengue_db:
    hostname: dengue_db
    extends:
      service: base_postgres
    env_file:
      - ../.env
    environment:
      PG_RESTORE_STAGING: ${PG_RESTORE_STAGING}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "md5"
    ports:
      - ${PSQL_PORT}:5432
    volumes:
      - ${PG_DATA_PROD}:/var/lib/postgresql/data/:rw
      - ../containers/postgres/setup/:/docker-entrypoint-initdb.d/
      - ../containers/postgres/dumps/:/dumps/
    command: -p ${PSQL_PORT} # postgres -c max_wal_size=3GB
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PSQL_PORT} -U ${PSQL_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10

  memcached:
    hostname: memcached
    image: memcached:alpine
    entrypoint:
      - memcached
      - -m 64
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "11211"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s  # requires docker-compose 3.4
    restart: always

  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:3-alpine
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5672"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s  # requires docker-compose 3.4
    restart: always

  base:
    build:
      context: ".."
      dockerfile: "containers/web/Dockerfile"
      args:
        HOST_UID: ${HOST_UID}
        HOST_GID: ${HOST_GID}
        ENV: ${ENV}
    env_file:
      - ../.env
    environment:
      - MEMCACHED_HOST=memcached
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
      - PSQL_HOST=${PSQL_HOST}
      - PSQL_PORT=${PSQL_PORT}
    volumes:
      - ${DOCKER_HOST_MEDIA_ROOT}:/MEDIA_ROOT
      - ${DOCKER_HOST_IMPORTED_FILES_DIR}:/IMPORTED_FILES
      - ${DOCKER_HOST_SHAPEFILES_DIR}:/srv/deploy/shapefile
      - ${DOCKER_HOST_TEMP_PARQUET_DIR}:/tmp/
    profiles:
      - donotstart

  web:
    hostname: web
    extends:
      service: base
    ports:
      - ${PORT_WEB}:8000
    env_file:
      - ../.env
    depends_on:
      - rabbitmq
      - memcached
    restart: always
    command: ["gunicorn", "-w", "4", "-b", "0.0.0.0:8000", "ad_main.wsgi:application", "--timeout", "9640"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s  # requires docker-compose 3.4

  minio:
    platform: linux/amd64
    image: quay.io/minio/minio
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      MINIO_USERNAME: ${MINIO_USERNAME}
      MINIO_GROUPNAME: ${MINIO_GROUPNAME}
      MINIO_GID: ${HOST_UID}
      MINIO_UID: ${HOST_GID}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_PORT_1: 9000
      MINIO_PORT_2: 9090
      # MINIO_ENDPOINT: http://minio:9090
    command: [
      "server",
      "/data",
      "--console-address",
      ":9090"
    ]
    ports:
      - ${MINIO_PORT_1}:9000
      - ${MINIO_PORT_2}:9090
    volumes:
      - ${HOST_MINIO_DATA_DIR}:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 40s  # requires docker-compose 3.4

volumes:
  dumps:

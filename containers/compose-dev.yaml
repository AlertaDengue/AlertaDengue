version: "3.4"
services:
  memcached:
    networks:
      - staging

  rabbitmq:
    networks:
      - staging

  db:
    build:
      context: ".."
      dockerfile: "containers/postgres/Dockerfile"
    env_file:
      - ../.env
    environment:
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "md5"
    hostname: db
    networks:
      - staging
    ports:
      - ${PSQL_PORT}:${PSQL_PORT}
    expose:
      - ${PSQL_PORT}
    volumes:
      # SETUP: define between SCHEMAS or DUMPS
      - ./postgres/setup/${PSQL_SETUP}:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data/
    command: -p ${PSQL_PORT} # postgres -c max_wal_size=3GB
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PSQL_PORT} -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: -p ${PSQL_PORT}

  web:
    # entrypoint: ["/entrypoint.sh"]
    image: infodengue-dev_base:latest
    env_file:
      - ../.env
    ports:
      - 8080:8000
    networks:
      - staging
    command: ["python", "manage.py", "runserver"]

  worker:
    networks:
      - staging
    depends_on:
      - rabbitmq
    restart: always

volumes:
  postgres_data:

networks:
  staging:
      driver: bridge
